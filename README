Stream is used to compute elements as per the pipelined methods without altering the original value of the object.

Different Operations On Streams-
Intermediate Operations:
========
 1)	map: The map method is used to map the items in the collection to other objects according to the 
 					Predicate passed as argument.
		List number = Arrays.asList(2,3,4,5);
		List square = number.stream().map(x->x*x).collect(Collectors.toList());
		
 2)filter: The filter method is used to select elements as per the Predicate passed as argument.
 
		List names = Arrays.asList("Reflection","Collection","Stream");
		List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());
		
3)sorted: The sorted method is used to sort the stream.

		List names = Arrays.asList("Reflection","Collection","Stream");
		List result = names.stream().sorted().collect(Collectors.toList());
		
Terminal Operations:
=========
1)collect: The collect method is used to return the result of the intermediate operations performed on the stream.
	List number = Arrays.asList(2,3,4,5,3);
	Set square = number.stream().map(x->x*x).collect(Collectors.toSet());
	
2)forEach: The forEach method is used to iterate through every element of the stream.
List number = Arrays.asList(2,3,4,5);
number.stream().map(x->x*x).forEach(y->System.out.println(y));

2)reduce: The reduce method is used to reduce the elements of a stream to a single value.
	The reduce method takes a BinaryOperator as a parameter.
	List number = Arrays.asList(2,3,4,5);
	int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);

Here ans variable is assigned 0 as the initial value and i is added to it .

===========

Generally, when you build an application using Java or other JVM-based languages when you compile your 
project, it compiles the human readable code to byte-code which can be understood by JVM or other virtual
 machines that run on top of underlying OS. While execution, VM interprets those bytecodes and convert 
 them  to the binaries that processors can understand.
